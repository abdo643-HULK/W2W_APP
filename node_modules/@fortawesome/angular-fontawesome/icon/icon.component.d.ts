import { OnChanges, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { FaSymbol, FlipProp, IconDefinition, IconProp, PullProp, RotateProp, SizeProp, Styles, Transform } from '@fortawesome/fontawesome-svg-core';
import { FaConfig } from '../config';
import { FaIconLibrary } from '../icon-library';
import { FaStackItemSizeDirective } from '../stack/stack-item-size.directive';
import * as ɵngcc0 from '@angular/core';
export declare class FaIconComponent implements OnChanges {
    private sanitizer;
    private config;
    private iconLibrary;
    private stackItem;
    icon: IconProp;
    /**
     * Specify a title for the icon.
     * This text will be displayed in a tooltip on hover and presented to the
     * screen readers.
     */
    title?: string;
    spin?: boolean;
    pulse?: boolean;
    mask?: IconProp;
    styles?: Styles;
    flip?: FlipProp;
    size?: SizeProp;
    pull?: PullProp;
    border?: boolean;
    inverse?: boolean;
    symbol?: FaSymbol;
    rotate?: RotateProp;
    fixedWidth?: boolean;
    classes?: string[];
    transform?: string | Transform;
    /**
     * Specify the `role` attribute for the rendered <svg> element.
     *
     * @default 'img'
     */
    a11yRole: string;
    renderedIconHTML: SafeHtml;
    constructor(sanitizer: DomSanitizer, config: FaConfig, iconLibrary: FaIconLibrary, stackItem: FaStackItemSizeDirective);
    ngOnChanges(changes: SimpleChanges): never;
    /**
     * Programmatically trigger rendering of the icon.
     *
     * This method is useful, when creating {@link FaIconComponent} dynamically or
     * changing its inputs programmatically as in these cases icon won't be
     * re-rendered automatically.
     */
    render(): void;
    protected findIconDefinition(i: IconProp | IconDefinition): IconDefinition | null;
    protected buildParams(): {
        title: string;
        transform: Transform;
        classes: string[];
        mask: IconDefinition;
        styles: Styles;
        symbol: string | boolean;
        attributes: {
            role: string;
        };
    };
    private renderIcon;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FaIconComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FaIconComponent, "fa-icon", never, { "classes": "classes"; "icon": "icon"; "title": "title"; "spin": "spin"; "pulse": "pulse"; "mask": "mask"; "styles": "styles"; "flip": "flip"; "size": "size"; "pull": "pull"; "border": "border"; "inverse": "inverse"; "symbol": "symbol"; "rotate": "rotate"; "fixedWidth": "fixedWidth"; "transform": "transform"; "a11yRole": "a11yRole"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaWNvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBGYVN5bWJvbCwgRmxpcFByb3AsIEljb25EZWZpbml0aW9uLCBJY29uUHJvcCwgUHVsbFByb3AsIFJvdGF0ZVByb3AsIFNpemVQcm9wLCBTdHlsZXMsIFRyYW5zZm9ybSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZSc7XHJcbmltcG9ydCB7IEZhQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcclxuaW1wb3J0IHsgRmFJY29uTGlicmFyeSB9IGZyb20gJy4uL2ljb24tbGlicmFyeSc7XHJcbmltcG9ydCB7IEZhU3RhY2tJdGVtU2l6ZURpcmVjdGl2ZSB9IGZyb20gJy4uL3N0YWNrL3N0YWNrLWl0ZW0tc2l6ZS5kaXJlY3RpdmUnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGYUljb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gICAgcHJpdmF0ZSBzYW5pdGl6ZXI7XHJcbiAgICBwcml2YXRlIGNvbmZpZztcclxuICAgIHByaXZhdGUgaWNvbkxpYnJhcnk7XHJcbiAgICBwcml2YXRlIHN0YWNrSXRlbTtcclxuICAgIGljb246IEljb25Qcm9wO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTcGVjaWZ5IGEgdGl0bGUgZm9yIHRoZSBpY29uLlxyXG4gICAgICogVGhpcyB0ZXh0IHdpbGwgYmUgZGlzcGxheWVkIGluIGEgdG9vbHRpcCBvbiBob3ZlciBhbmQgcHJlc2VudGVkIHRvIHRoZVxyXG4gICAgICogc2NyZWVuIHJlYWRlcnMuXHJcbiAgICAgKi9cclxuICAgIHRpdGxlPzogc3RyaW5nO1xyXG4gICAgc3Bpbj86IGJvb2xlYW47XHJcbiAgICBwdWxzZT86IGJvb2xlYW47XHJcbiAgICBtYXNrPzogSWNvblByb3A7XHJcbiAgICBzdHlsZXM/OiBTdHlsZXM7XHJcbiAgICBmbGlwPzogRmxpcFByb3A7XHJcbiAgICBzaXplPzogU2l6ZVByb3A7XHJcbiAgICBwdWxsPzogUHVsbFByb3A7XHJcbiAgICBib3JkZXI/OiBib29sZWFuO1xyXG4gICAgaW52ZXJzZT86IGJvb2xlYW47XHJcbiAgICBzeW1ib2w/OiBGYVN5bWJvbDtcclxuICAgIHJvdGF0ZT86IFJvdGF0ZVByb3A7XHJcbiAgICBmaXhlZFdpZHRoPzogYm9vbGVhbjtcclxuICAgIGNsYXNzZXM/OiBzdHJpbmdbXTtcclxuICAgIHRyYW5zZm9ybT86IHN0cmluZyB8IFRyYW5zZm9ybTtcclxuICAgIC8qKlxyXG4gICAgICogU3BlY2lmeSB0aGUgYHJvbGVgIGF0dHJpYnV0ZSBmb3IgdGhlIHJlbmRlcmVkIDxzdmc+IGVsZW1lbnQuXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgJ2ltZydcclxuICAgICAqL1xyXG4gICAgYTExeVJvbGU6IHN0cmluZztcclxuICAgIHJlbmRlcmVkSWNvbkhUTUw6IFNhZmVIdG1sO1xyXG4gICAgY29uc3RydWN0b3Ioc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIGNvbmZpZzogRmFDb25maWcsIGljb25MaWJyYXJ5OiBGYUljb25MaWJyYXJ5LCBzdGFja0l0ZW06IEZhU3RhY2tJdGVtU2l6ZURpcmVjdGl2ZSk7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogbmV2ZXI7XHJcbiAgICAvKipcclxuICAgICAqIFByb2dyYW1tYXRpY2FsbHkgdHJpZ2dlciByZW5kZXJpbmcgb2YgdGhlIGljb24uXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZnVsLCB3aGVuIGNyZWF0aW5nIHtAbGluayBGYUljb25Db21wb25lbnR9IGR5bmFtaWNhbGx5IG9yXHJcbiAgICAgKiBjaGFuZ2luZyBpdHMgaW5wdXRzIHByb2dyYW1tYXRpY2FsbHkgYXMgaW4gdGhlc2UgY2FzZXMgaWNvbiB3b24ndCBiZVxyXG4gICAgICogcmUtcmVuZGVyZWQgYXV0b21hdGljYWxseS5cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCk6IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgZmluZEljb25EZWZpbml0aW9uKGk6IEljb25Qcm9wIHwgSWNvbkRlZmluaXRpb24pOiBJY29uRGVmaW5pdGlvbiB8IG51bGw7XHJcbiAgICBwcm90ZWN0ZWQgYnVpbGRQYXJhbXMoKToge1xyXG4gICAgICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICAgICAgdHJhbnNmb3JtOiBUcmFuc2Zvcm07XHJcbiAgICAgICAgY2xhc3Nlczogc3RyaW5nW107XHJcbiAgICAgICAgbWFzazogSWNvbkRlZmluaXRpb247XHJcbiAgICAgICAgc3R5bGVzOiBTdHlsZXM7XHJcbiAgICAgICAgc3ltYm9sOiBzdHJpbmcgfCBib29sZWFuO1xyXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgcm9sZTogc3RyaW5nO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgcHJpdmF0ZSByZW5kZXJJY29uO1xyXG59XHJcbiJdfQ==